"use strict";(self.webpackChunkmickael_blog=self.webpackChunkmickael_blog||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/rentcrl-domain-driven-design-minimal-api","metadata":{"permalink":"/blog/rentcrl-domain-driven-design-minimal-api","source":"@site/blog/rentcrl-domain-driven-design-minimal-api.md","title":"RentCRL \u2013 entre Domain Driven Design et minimal API","description":"Suite du d\xe9veloppement de RentCRL : l\u2019application qui permet aux propri\xe9taires d\u2019envoyer automatiquement les quittances de loyer \xe0 leurs locataires. Apr\xe8s avoir travaill\xe9 sur le frontend en React et l\u2019int\xe9gration d\u2019Auth0 pour l\u2019authentification, je me suis attaqu\xe9 au backend. Je vous partage ici mes choix techniques et leur motivation.","date":"2025-04-14T18:40:11.256Z","formattedDate":"14 avril 2025","tags":[],"readingTime":2.84,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Architecture de RentCRL","permalink":"/blog/architecture-rentcrl"}},"content":"Suite du d\xe9veloppement de RentCRL : l\u2019application qui permet aux propri\xe9taires d\u2019envoyer automatiquement les quittances de loyer \xe0 leurs locataires. Apr\xe8s avoir travaill\xe9 sur le frontend en React et l\u2019int\xe9gration d\u2019Auth0 pour l\u2019authentification, je me suis attaqu\xe9 au backend. Je vous partage ici mes choix techniques et leur motivation.\\n\\nPour faire simple, nous parlerons de clean architecture, DDD, minimal API, du pattern Result et de FluentValidation.\\n\\n### \ud83e\udde0 Pourquoi Clean Architecture et Domain Driven Design ?\\n\\nJ\u2019ai choisi de structurer mon backend en suivant les principes de la **Clean Architecture** et du **Domain Driven Design** car ceux-ci sont populaires dans l\u2019industrie et j\u2019avais tout simplement envie de me les approprier et de les d\xe9couvrir.\\n\\nCe n\u2019est pas forc\xe9ment simple au d\xe9but, mais \xe7a force \xe0 bien s\xe9parer les responsabilit\xe9s :\\n\\n- le domaine contient la logique m\xe9tier\\n- l\u2019application s\u2019occupe de l\u2019orchestration\\n- l\u2019infrastructure g\xe8re l\u2019acc\xe8s aux donn\xe9es\\n- la pr\xe9sentation re\xe7oit les requ\xeates\\n\\nVoici l\u2019arborescence de la solution :\\n\\n![image.png](../static/img/image.png)\\n\\n### Pourquoi j\u2019ai utiliser Minimal API ?\\n\\nAlors j\u2019ai choisi d\u2019utiliser Minimal API car pendant longtemps il fallait utiliser des contr\xf4leurs mais depuis environ 2 ans .Net a sorti minimal API donc je me suis int\xe9ress\xe9 a ce que c\u2019est.\\n\\nDe plus, je suis tomb\xe9 sur une vid\xe9o de Nick Chapsas qui compare minimal API avec MVC \xe0 travers une discussion sur le sujet et ce que j\u2019en retiens est que minimal API est plus rapide, plus moderne avec moins de boilerplate et donc \xe7a m\u2019a encourag\xe9 dans mon envie de partir dessus.\\n\\n[https://www.youtube.com/watch?v=bpVN_plQm5E](https://www.youtube.com/watch?v=bpVN_plQm5E)\\n\\n### \ud83c\udfaf Pourquoi j\'utilise `Result<T>` au lieu d\u2019Exceptions ?\\n\\nJ\u2019ai r\xe9cemment regard\xe9 la vid\xe9o de Milan Jovanovic qui introduit le pattern Result :\\n\\n[https://www.youtube.com/watch?v=WCCkEe_Hy2Y&t=612s](https://www.youtube.com/watch?v=WCCkEe_Hy2Y&t=612s)\\n\\nIl explique que les exceptions peuvent \xeatre co\xfbteuses en performance. Alors, il propose un pattern int\xe9ressant pour g\xe9rer les erreurs \u201cattendues\u201d comme par exemple les erreurs de validation.\\n\\nEt ainsi, on envoie des exceptions que pour les erreurs qui th\xe9oriquement ne devraient jamais arriver comment par exemple au moment de la cr\xe9ation d\u2019un Owner avec un param\xe8tre non valide.\\nErreur attendue :\\n\\n![image.png](../static/img/image%201.png)\\n\\nErreur qui ne devrait pas se produire car on est d\xe9j\xe0 pass\xe9 par toutes les couches pr\xe9c\xe9dentes (y compris la validation avec FluentValidation) :\\n\\n![image.png](../static/img/image%202.png)\\n\\n### \u2714\ufe0f Et FluentValidation dans tout \xe7a ?\\n\\nJe valide les entr\xe9es utilisateur d\xe8s la couche d\u2019exposition, avec **FluentValidation**. C\u2019est simple \xe0 brancher, puissant, et me permet de retourner des erreurs claires c\xf4t\xe9 frontend sans m\xealer la validation \xe0 la logique m\xe9tier. La couche domaine reste concentr\xe9e sur les r\xe8gles m\xe9tier, pendant que la validation des entr\xe9es est g\xe9r\xe9e directement dans la couche de pr\xe9sentation. \xc7a m\'\xe9vite d\u2019avoir des if/else ou des exceptions partout, et je peux centraliser les r\xe8gles de validation dans des classes d\xe9di\xe9es.\\n\\nJ\u2019ai d\xe9couvert FluentValidation gr\xe2ce \xe0 mon fr\xe8re, mais aussi via cette vid\xe9o de Milan Jovanovic qui en fait une bonne d\xe9mo :\\n\\n[https://www.youtube.com/watch?v=vaDDB7BpEgQ](https://www.youtube.com/watch?v=vaDDB7BpEgQ)\\n\\nC\u2019est ce qui m\u2019a convaincu de l\u2019adopter ici.\\n\\n```csharp\\npublic class OwnerModelValidator : AbstractValidator<OwnerModel>\\n{\\n    public OwnerModelValidator()\\n    {\\n        RuleFor(o => o.Auth0Id).NotEmpty();\\n        RuleFor(o => o.FirstName).NotEmpty();\\n        RuleFor(o => o.LastName).NotEmpty();\\n        RuleFor(o => o.Email).NotEmpty().Matches(Regexes.Email);\\n        RuleFor(o => o.PhoneNumber).NotEmpty().Matches(Regexes.PhoneNumber);\\n    }\\n}\\n\\n```\\n\\n![image.png](../static/img/image%203.png)\\n\\n### \ud83e\uddea Le r\xe9sultat ?\\n\\nAu final, je pense avoir un backend propre. C\u2019est-\xe0-dire testable et facile \xe0 maintenir pour ajouter les autres fonctionnalit\xe9s par la suite et pr\xeat \xe0 \xeatre d\xe9ploy\xe9 sur Azure. En tout cas, cela reste mon point de vue de d\xe9veloppeur avec 2 ans d\u2019exp\xe9rience.\\n\\n\ud83d\udcc1 Code source ici : [github.com/MickaelCRL/RentCRL](https://github.com/MickaelCRL/RentCRL)"},{"id":"/architecture-rentcrl","metadata":{"permalink":"/blog/architecture-rentcrl","source":"@site/blog/architecture-rentcrl.md","title":"Architecture de RentCRL","description":"1 - Introduction","date":"2024-03-07T00:00:00.000Z","formattedDate":"7 mars 2024","tags":[],"readingTime":1.535,"hasTruncateMarker":false,"authors":[{"name":"Micka\xebl C\xe9raline"}],"frontMatter":{"title":"Architecture de RentCRL","author":"Micka\xebl C\xe9raline","date":"2024-03-07T00:00:00.000Z"},"prevItem":{"title":"RentCRL \u2013 entre Domain Driven Design et minimal API","permalink":"/blog/rentcrl-domain-driven-design-minimal-api"},"nextItem":{"title":"Pr\xe9sentation de RentCRL","permalink":"/blog/presentation-rentcrl"}},"content":"\x3c!-- # 02 - Architecture de RentCRL --\x3e\\r\\n\\r\\n## 1 - Introduction\\r\\n\\r\\n<head>\\r\\n  <meta name=\\"og:title\\" content=\\"Architecture RentCRL\\"/>\\r\\n  <meta name=\\"og:image\\" content=\\"/static/img/architecture-Infrastructure.png\\"/>\\r\\n  <meta name=\\"twitter:image\\" content=\\"/static/img/architecture-Infrastructure.png\\"/>\\r\\n</head>\\r\\n\\r\\nDans cet article, je vais vous pr\xe9senter l\'architecture de RentCRL, visant \xe0 simplifier la gestion locative en automatisant les t\xe2ches telles que la collecte des loyers et la g\xe9n\xe9ration des quittances pour les propri\xe9taires.\\r\\n\\r\\n## 2 - Choix Conceptuels\\r\\n\\r\\nPour ce projet de taille modeste, j\'ai choisi de r\xe9aliser uniquement 3 diagrammes dans ma partie conception pour m\'aider \xe0 le concr\xe9tiser.\\r\\n\\r\\nLes voici :\\r\\n\\r\\n### Diagramme de cas d\'utilisation\\r\\n\\r\\n<a href=\\"/img/architecture-Use-case.jpg\\" target=\\"_blank\\">\\r\\n<img src=\\"/img/architecture-Use-case.jpg\\" alt=\\"architecture-Use-case\\"/>\\r\\n</a>\\r\\nLe diagramme de cas d\'utilisation de RentCRL illustre les interactions entre les utilisateurs et le syst\xe8me. Les acteurs, tels que les propri\xe9taires, les locataires et les collaborateurs, interagissent avec diff\xe9rentes fonctionnalit\xe9s de l\'application.\\r\\n\\r\\n### Diagramme de classe\\r\\n\\r\\n<a href=\\"/img/architecture-Class-Diagram.jpg\\" target=\\"_blank\\">\\r\\n<img src=\\"/img/architecture-Class-Diagram.jpg\\" alt=\\"architecture-Class-Diagram\\"/>\\r\\n</a>\\r\\nLe diagramme de classe de RentCRL mod\xe9lise la structure des entit\xe9s principales et leurs relations.\\r\\n\\r\\n### Diagramme d\'infrastructure\\r\\n\\r\\n<a href=\\"/img/architecture-Infrastructure.jpg\\" target=\\"_blank\\">\\r\\n<img src=\\"/img/architecture-Infrastructure.jpg\\" alt=\\"architecture-Infrastructure\\"/>\\r\\n</a>\\r\\n\\r\\nL\'infrastructure de RentCRL se compose de quatre \xe9l\xe9ments cl\xe9s :\\r\\n\\r\\n- Web : L\'application web contenant les fichiers JavaScript, HTML, CSS.\\r\\n- Backend : L\'application backend renfermant les fichiers C# / .Net et responsable du fonctionnement logique du syst\xe8me.\\r\\n- DataBase \'CosmosDB\' : Le stockage s\xe9curis\xe9 des donn\xe9es n\xe9cessaires au bon fonctionnement de RentCRL.\\r\\n- Auth0 : L\'authentification et la gestion des mots de passe des utilisateurs.\\r\\n\\r\\nJ\'ai choisi ces trois diagrammes sp\xe9cifiques pour leur pertinence m\xeame dans le cadre d\'un projet modeste comme RentCRL. Ensemble, ils fournissent une perspective exhaustive des interactions utilisateur, de la structure des donn\xe9es et de l\'infrastructure technique n\xe9cessaires pour le d\xe9veloppement du syst\xe8me.\\r\\n\\r\\n## 3 - CONCLUSION\\r\\n\\r\\nCes diagrammes constituent une base pour m\'aider \xe0 la r\xe9alisation concr\xe8te de RentCRL. Dans le prochain article, je commencerai \xe0 montrer comment cr\xe9er la solution."},{"id":"/presentation-rentcrl","metadata":{"permalink":"/blog/presentation-rentcrl","source":"@site/blog/presentation-rentcrl.md","title":"Pr\xe9sentation de RentCRL","description":"1 - Objectif","date":"2023-09-30T00:00:00.000Z","formattedDate":"30 septembre 2023","tags":[],"readingTime":1.225,"hasTruncateMarker":false,"authors":[{"name":"Micka\xebl C\xe9raline"}],"frontMatter":{"title":"Pr\xe9sentation de RentCRL","author":"Micka\xebl C\xe9raline","date":"2023-09-30T00:00:00.000Z"},"prevItem":{"title":"Architecture de RentCRL","permalink":"/blog/architecture-rentcrl"}},"content":"\x3c!-- # 01 - Pr\xe9sentation de RentCRL --\x3e\\r\\n\\r\\n## 1 - Objectif\\r\\n\\r\\n<head>\\r\\n  <meta name=\\"og:title\\" content=\\"Pr\xe9sentation RentCRL\\"/>\\r\\n  <meta name=\\"og:image\\" content=\\"/static/img/logo_RentCRL.png\\"/>\\r\\n  <meta name=\\"twitter:image\\" content=\\"/static/img/logo_RentCRL.png\\"/>\\r\\n</head>\\r\\n\\r\\nJe suis heureux de vous pr\xe9senter mon nouveau projet, RentCRL. Dans les prochains jours, je travaillerai activement sur ce projet et partagerai avec vous les d\xe9tails de son d\xe9veloppement \xe0 travers une s\xe9rie d\'articles.\\r\\n\\r\\nRentCRL vise \xe0 simplifier la gestion des biens immobiliers pour les propri\xe9taires. Il s\'agit d\'une application web qui permettra aux propri\xe9taires de pr\xe9lever les loyers de leurs locataires et d\'envoyer les quittances de mani\xe8re enti\xe8rement automatis\xe9e.\\r\\n\\r\\n## 2 - Inspiration\\r\\n\\r\\nL\'id\xe9e derri\xe8re RentCRL d\xe9coule d\'une exp\xe9rience personnelle au sein de notre entreprise familiale sp\xe9cialis\xe9e dans l\'immobilier. Nous avons constat\xe9 la n\xe9cessit\xe9 de simplifier le processus de gestion des loyers et des quittances, actuellement g\xe9r\xe9 manuellement avec l\'aide de l\'outil Rentila.\\r\\n\\r\\nMes motivations pour ce projet sont doubles :\\r\\n\\r\\n<ol>\\r\\n  <li>Simplifier et automatiser une t\xe2che fastidieuse tout en mettant en pratique mes comp\xe9tences en d\xe9veloppement web.</li>\\r\\n  <li>Accro\xeetre ma visibilit\xe9 en tant que d\xe9veloppeur web pour d\xe9crocher des contrats de d\xe9veloppement int\xe9ressants.</li>\\r\\n</ol>\\r\\n\\r\\n## 3 - M\xe9thodologie\\r\\n\\r\\nLe d\xe9veloppement de RentCRL fera appel aux technologies suivantes :\\r\\n\\r\\n<ul>\\r\\n  <li>Front-end :\\r\\n    <ul>\\r\\n      <li>JavaScript</li>\\r\\n      <li>HTML5</li>\\r\\n      <li>Angular</li>\\r\\n      <li>CSS3</li>\\r\\n    </ul>\\r\\n  </li>\\r\\n  <li>Back-end :\\r\\n    <ul>\\r\\n      <li>C# / .NET</li>\\r\\n    </ul>\\r\\n  </li>\\r\\n  <li>Base de donn\xe9es :\\r\\n    <ul>\\r\\n      <li>Azure CosmosDB</li>\\r\\n    </ul>\\r\\n  </li>\\r\\n</ul>\\r\\n\\r\\n## 4 - \xc0 venir\\r\\n\\r\\nJe commencerai par la phase de planification et de conception. Prochainement, je vous pr\xe9senterai en d\xe9tail l\'architecture de RentCRL."}]}')}}]);